name: Build Executables

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-executables:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install postgresql@14

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Create backend executable
        run: |
          cd backend
          pyinstaller --onefile --name smart_locker_backend app.py

      - name: Create frontend executable (macOS/Linux)
        if: matrix.os != 'windows-latest'
        run: |
          cd frontend
          npm install -g pkg
          pkg . --targets node18-linux-x64,node18-macos-x64 --output smart_locker_frontend

      - name: Create frontend executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd frontend
          npm install -g pkg
          pkg . --targets node18-win-x64 --output smart_locker_frontend.exe

      - name: Create startup script (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo '#!/bin/bash' > start_smart_locker.sh
          echo 'echo "Starting Smart Locker System..."' >> start_smart_locker.sh
          echo 'echo "Backend: http://localhost:5172"' >> start_smart_locker.sh
          echo 'echo "Frontend: http://localhost:5173"' >> start_smart_locker.sh
          echo 'echo ""' >> start_smart_locker.sh
          echo 'echo "Starting backend..."' >> start_smart_locker.sh
          echo './backend/dist/smart_locker_backend --demo &' >> start_smart_locker.sh
          echo 'BACKEND_PID=$!' >> start_smart_locker.sh
          echo 'sleep 5' >> start_smart_locker.sh
          echo 'echo "Starting frontend..."' >> start_smart_locker.sh
          echo './frontend/smart_locker_frontend &' >> start_smart_locker.sh
          echo 'FRONTEND_PID=$!' >> start_smart_locker.sh
          echo 'echo ""' >> start_smart_locker.sh
          echo 'echo "Smart Locker System is running!"' >> start_smart_locker.sh
          echo 'echo "Press Ctrl+C to stop"' >> start_smart_locker.sh
          echo 'trap "kill $BACKEND_PID $FRONTEND_PID; exit" INT' >> start_smart_locker.sh
          echo 'wait' >> start_smart_locker.sh
          chmod +x start_smart_locker.sh

      - name: Create startup script (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo '#!/bin/bash' > start_smart_locker.sh
          echo 'echo "Starting Smart Locker System..."' >> start_smart_locker.sh
          echo 'echo "Backend: http://localhost:5172"' >> start_smart_locker.sh
          echo 'echo "Frontend: http://localhost:5173"' >> start_smart_locker.sh
          echo 'echo ""' >> start_smart_locker.sh
          echo 'echo "Starting backend..."' >> start_smart_locker.sh
          echo './backend/dist/smart_locker_backend --demo &' >> start_smart_locker.sh
          echo 'BACKEND_PID=$!' >> start_smart_locker.sh
          echo 'sleep 5' >> start_smart_locker.sh
          echo 'echo "Starting frontend..."' >> start_smart_locker.sh
          echo './frontend/smart_locker_frontend &' >> start_smart_locker.sh
          echo 'FRONTEND_PID=$!' >> start_smart_locker.sh
          echo 'echo ""' >> start_smart_locker.sh
          echo 'echo "Smart Locker System is running!"' >> start_smart_locker.sh
          echo 'echo "Press Ctrl+C to stop"' >> start_smart_locker.sh
          echo 'trap "kill $BACKEND_PID $FRONTEND_PID; exit" INT' >> start_smart_locker.sh
          echo 'wait' >> start_smart_locker.sh
          chmod +x start_smart_locker.sh

      - name: Create startup script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo '@echo off' > start_smart_locker.bat
          echo 'echo Starting Smart Locker System...' >> start_smart_locker.bat
          echo 'echo Backend: http://localhost:5172' >> start_smart_locker.bat
          echo 'echo Frontend: http://localhost:5173' >> start_smart_locker.bat
          echo 'echo.' >> start_smart_locker.bat
          echo 'echo Starting backend...' >> start_smart_locker.bat
          echo 'start /B backend\dist\smart_locker_backend.exe --demo' >> start_smart_locker.bat
          echo 'timeout /t 5 /nobreak >nul' >> start_smart_locker.bat
          echo 'echo Starting frontend...' >> start_smart_locker.bat
          echo 'start /B frontend\smart_locker_frontend.exe' >> start_smart_locker.bat
          echo 'echo.' >> start_smart_locker.bat
          echo 'echo Smart Locker System is running!' >> start_smart_locker.bat
          echo 'echo Press Ctrl+C to stop' >> start_smart_locker.bat
          echo 'pause' >> start_smart_locker.bat

      - name: Create README for executables
        run: |
          echo '# Smart Locker System - Executable Build' > EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo 'This build contains standalone executables for the Smart Locker System.' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '## System Requirements' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '- **macOS**: macOS 10.15 or later' >> EXECUTABLE_README.md
          echo '- **Windows**: Windows 10 or later' >> EXECUTABLE_README.md
          echo '- **Linux**: Ubuntu 18.04+ or similar' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '## Quick Start' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '### macOS/Linux' >> EXECUTABLE_README.md
          echo '```bash' >> EXECUTABLE_README.md
          echo 'chmod +x start_smart_locker.sh' >> EXECUTABLE_README.md
          echo './start_smart_locker.sh' >> EXECUTABLE_README.md
          echo '```' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '### Windows' >> EXECUTABLE_README.md
          echo '```cmd' >> EXECUTABLE_README.md
          echo 'start_smart_locker.bat' >> EXECUTABLE_README.md
          echo '```' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '## Access' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '- **Backend API**: http://localhost:5172' >> EXECUTABLE_README.md
          echo '- **Frontend**: http://localhost:5173' >> EXECUTABLE_README.md
          echo '- **Admin Dashboard**: http://localhost:5173/admin' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '## Default Credentials' >> EXECUTABLE_README.md
          echo '' >> EXECUTABLE_README.md
          echo '- **Admin**: admin / admin123' >> EXECUTABLE_README.md
          echo '- **Student**: student1 / student123' >> EXECUTABLE_README.md
          echo '- **Manager**: manager / manager123' >> EXECUTABLE_README.md
          echo '- **Supervisor**: supervisor / supervisor123' >> EXECUTABLE_README.md

      - name: Upload executables as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smart-locker-executables-${{ matrix.os }}
          path: |
            backend/dist/
            frontend/smart_locker_frontend*
            start_smart_locker.*
            EXECUTABLE_README.md
          retention-days: 30
